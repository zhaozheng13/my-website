import{a as e,m as n,b as t,d as r,e as i,l as a,g as o,i as d,u as s,s as c,f as l,h as g,p as f,j as u,k as p,n as h,q as w}from"./index.NxzPILQn-1749454011547.js";import{G as v}from"./graph-BUMcCM19.D0XtYHDv-1749454011547.js";import{l as m}from"./layout-DzgqTejS.1OGVfZ4l-1749454011547.js";import{c as y}from"./clone-CS7zTRQj.gBpdNwTQ-1749454011547.js";import{m as X}from"./min-DKZp8rBd.D6QzjrPz-1749454011547.js";import"./_baseUniq-CyBKxUBB.BIlCWORA-1749454011547.js";function b(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:E(e),edges:N(e)};return d(e.graph())||(n.value=y(e.graph())),n}function E(e){return X(e.nodes(),(function(n){var t=e.node(n),r=e.parent(n),i={v:n};return d(t)||(i.value=t),d(r)||(i.parent=r),i}))}function N(e){return X(e.edges(),(function(n){var t=e.edge(n),r={v:n.v,w:n.w};return d(n.name)||(r.name=n.name),d(t)||(r.value=t),r}))}var C=new Map,x=new Map,S=new Map,I=e((()=>{x.clear(),S.clear(),C.clear()}),"clear"),D=e(((e,n)=>{const t=x.get(n)||[];return a.trace("In isDescendant",n," ",e," = ",t.includes(e)),t.includes(e)}),"isDescendant"),O=e(((e,n)=>{const t=x.get(n)||[];return a.info("Descendants of ",n," is ",t),a.info("Edge is ",e),e.v!==n&&e.w!==n&&(t?t.includes(e.v)||D(e.v,n)||D(e.w,n)||t.includes(e.w):(a.debug("Tilt, ",n,",not in descendants"),!1))}),"edgeInCluster"),B=e(((e,n,t,r)=>{a.warn("Copying children of ",e,"root",r,"data",n.node(e),r);const i=n.children(e)||[];e!==r&&i.push(e),a.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach((i=>{if(n.children(i).length>0)B(i,n,t,r);else{const o=n.node(i);a.info("cp ",i," to ",r," with parent ",e),t.setNode(i,o),r!==n.parent(i)&&(a.warn("Setting parent",i,n.parent(i)),t.setParent(i,n.parent(i))),e!==r&&i!==e?(a.debug("Setting parent",i,e),t.setParent(i,e)):(a.info("In copy ",e,"root",r,"data",n.node(e),r),a.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));const d=n.edges(i);a.debug("Copying Edges",d),d.forEach((i=>{a.info("Edge",i);const o=n.edge(i.v,i.w,i.name);a.info("Edge data",o,r);try{O(i,r)?(a.info("Copying as ",i.v,i.w,o,i.name),t.setEdge(i.v,i.w,o,i.name),a.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))):a.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(d){a.error(d)}}))}a.debug("Removing node",i),n.removeNode(i)}))}),"copy"),k=e(((e,n)=>{const t=n.children(e);let r=[...t];for(const i of t)S.set(i,e),r=[...r,...k(i,n)];return r}),"extractDescendants"),G=e(((e,n,t)=>{const r=e.edges().filter((e=>e.v===n||e.w===n)),i=e.edges().filter((e=>e.v===t||e.w===t)),a=r.map((e=>({v:e.v===n?t:e.v,w:e.w===n?n:e.w}))),o=i.map((e=>({v:e.v,w:e.w})));return a.filter((e=>o.some((n=>e.v===n.v&&e.w===n.w))))}),"findCommonEdges"),P=e(((e,n,t)=>{const r=n.children(e);if(a.trace("Searching children of id ",e,r),r.length<1)return e;let i;for(const a of r){const e=P(a,n,t),r=G(n,t,e);if(e){if(!(r.length>0))return e;i=e}}return i}),"findNonClusterChild"),T=e((e=>C.has(e)&&C.get(e).externalConnections&&C.has(e)?C.get(e).id:e),"getAnchorId"),j=e(((e,n)=>{if(!e||n>10)a.debug("Opting out, no graph ");else{a.debug("Opting in, graph "),e.nodes().forEach((function(n){e.children(n).length>0&&(a.warn("Cluster identified",n," Replacement id in edges: ",P(n,e,n)),x.set(n,k(n,e)),C.set(n,{id:P(n,e,n),clusterData:e.node(n)}))})),e.nodes().forEach((function(n){const t=e.children(n),r=e.edges();t.length>0?(a.debug("Cluster identified",n,x),r.forEach((e=>{D(e.v,n)^D(e.w,n)&&(a.warn("Edge: ",e," leaves cluster ",n),a.warn("Descendants of XXX ",n,": ",x.get(n)),C.get(n).externalConnections=!0)}))):a.debug("Not a cluster ",n,x)}));for(let n of C.keys()){const t=C.get(n).id,r=e.parent(t);r!==n&&C.has(r)&&!C.get(r).externalConnections&&(C.get(n).id=r)}e.edges().forEach((function(n){const t=e.edge(n);a.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),a.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let r=n.v,i=n.w;if(a.warn("Fix XXX",C,"ids:",n.v,n.w,"Translating: ",C.get(n.v)," --- ",C.get(n.w)),C.get(n.v)||C.get(n.w)){if(a.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),r=T(n.v),i=T(n.w),e.removeEdge(n.v,n.w,n.name),r!==n.v){const i=e.parent(r);C.get(i).externalConnections=!0,t.fromCluster=n.v}if(i!==n.w){const r=e.parent(i);C.get(r).externalConnections=!0,t.toCluster=n.w}a.warn("Fix Replacing with XXX",r,i,n.name),e.setEdge(r,i,t,n.name)}})),a.warn("Adjusted Graph",b(e)),J(e,0),a.trace(C)}}),"adjustClustersAndEdges"),J=e(((e,n)=>{var t,r;if(a.warn("extractor - ",n,b(e),e.children("D")),n>10)return void a.error("Bailing out");let i=e.nodes(),o=!1;for(const a of i){const n=e.children(a);o=o||n.length>0}if(o){a.debug("Nodes = ",i,n);for(const o of i)if(a.debug("Extracting node",o,C,C.has(o)&&!C.get(o).externalConnections,!e.parent(o),e.node(o),e.children("D")," Depth ",n),C.has(o))if(!C.get(o).externalConnections&&e.children(o)&&e.children(o).length>0){a.warn("Cluster without external connections, without a parent and with children",o,n);let i="TB"===e.graph().rankdir?"LR":"TB";(null==(r=null==(t=C.get(o))?void 0:t.clusterData)?void 0:r.dir)&&(i=C.get(o).clusterData.dir,a.warn("Fixing dir",C.get(o).clusterData.dir,i));const d=new v({multigraph:!0,compound:!0}).setGraph({rankdir:i,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));a.warn("Old graph before copy",b(e)),B(o,e,d,o),e.setNode(o,{clusterNode:!0,id:o,clusterData:C.get(o).clusterData,label:C.get(o).label,graph:d}),a.warn("New graph after copy node: (",o,")",b(d)),a.debug("Old graph after copy",b(e))}else a.warn("Cluster ** ",o," **not meeting the criteria !externalConnections:",!C.get(o).externalConnections," no parent: ",!e.parent(o)," children ",e.children(o)&&e.children(o).length>0,e.children("D"),n),a.debug(C);else a.debug("Not a cluster",o,n);i=e.nodes(),a.warn("New list of nodes",i);for(const t of i){const r=e.node(t);a.warn(" Now next level",t,r),(null==r?void 0:r.clusterNode)&&J(r.graph,n+1)}}else a.debug("Done, no node has children",e.nodes())}),"extractor"),A=e(((e,n)=>{if(0===n.length)return[];let t=Object.assign([],n);return n.forEach((n=>{const r=e.children(n),i=A(e,r);t=[...t,...i]})),t}),"sorter"),R=e((e=>A(e,e.children())),"sortNodesByHierarchy"),M=e((async(n,t,r,i,o,d)=>{a.warn("Graph in recursive render:XAX",b(t),o);const v=t.graph().rankdir;a.trace("Dir in recursive render - dir:",v);const y=n.insert("g").attr("class","root");t.nodes()?a.info("Recursive render XXX",t.nodes()):a.info("No nodes found for",t),t.edges().length>0&&a.info("Recursive edges",t.edge(t.edges()[0]));const X=y.insert("g").attr("class","clusters"),E=y.insert("g").attr("class","edgePaths"),N=y.insert("g").attr("class","edgeLabels"),x=y.insert("g").attr("class","nodes");await Promise.all(t.nodes().map((async function(e){const n=t.node(e);if(void 0!==o){const n=JSON.parse(JSON.stringify(o.clusterData));a.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",n.height,"\nParent cluster",o.height),t.setNode(o.id,n),t.parent(e)||(a.trace("Setting parent",e,o.id),t.setParent(e,o.id,n))}if(a.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),null==n?void 0:n.clusterNode){a.info("Cluster identified XBX",e,n.width,t.node(e));const{ranksep:o,nodesep:l}=t.graph();n.graph.setGraph({...n.graph.graph(),ranksep:o+25,nodesep:l});const g=await M(x,n.graph,r,i,t.node(e),d),f=g.elem;s(n,f),n.diff=g.diff||0,a.info("New compound node after recursive render XAX",e,"width",n.width,"height",n.height),c(f,n)}else t.children(e).length>0?(a.trace("Cluster - the non recursive path XBX",e,n.id,n,n.width,"Graph:",t),a.trace(P(n.id,t)),C.set(n.id,{id:P(n.id,t),node:n})):(a.trace("Node - the non recursive path XAX",e,x,t.node(e),v),await l(x,t.node(e),{config:d,dir:v}))})));const S=e((async()=>{const e=t.edges().map((async function(e){const n=t.edge(e.v,e.w,e.name);a.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),a.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),a.info("Fix",C,"ids:",e.v,e.w,"Translating: ",C.get(e.v),C.get(e.w)),await w(N,n)}));await Promise.all(e)}),"processEdges");await S(),a.info("Graph before layout:",JSON.stringify(b(t))),a.info("############################################# XXX"),a.info("###                Layout                 ### XXX"),a.info("############################################# XXX"),m(t),a.info("Graph after layout:",JSON.stringify(b(t)));let I=0,{subGraphTitleTotalMargin:D}=g(d);return await Promise.all(R(t).map((async function(e){var n;const r=t.node(e);if(a.info("Position XBX => "+e+": ("+r.x,","+r.y,") width: ",r.width," height: ",r.height),null==r?void 0:r.clusterNode)r.y+=D,a.info("A tainted cluster node XBX1",e,r.id,r.width,r.height,r.x,r.y,t.parent(e)),C.get(r.id).node=r,f(r);else if(t.children(e).length>0){a.info("A pure cluster node XBX1",e,r.id,r.x,r.y,r.width,r.height,t.parent(e)),r.height+=D,t.node(r.parentId);const i=(null==r?void 0:r.padding)/2||0,o=(null==(n=null==r?void 0:r.labelBBox)?void 0:n.height)||0,d=o-i||0;a.debug("OffsetY",d,"labelHeight",o,"halfPadding",i),await u(X,r),C.get(r.id).node=r}else{const e=t.node(r.parentId);r.y+=D/2,a.info("A regular node XBX1 - using the padding",r.id,"parent",r.parentId,r.width,r.height,r.x,r.y,"offsetY",r.offsetY,"parent",e,null==e?void 0:e.offsetY,r),f(r)}}))),t.edges().forEach((function(e){const n=t.edge(e);a.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(n),n),n.points.forEach((e=>e.y+=D/2));const o=t.node(e.v);var d=t.node(e.w);const s=p(E,n,C,r,o,d,i);h(n,s)})),t.nodes().forEach((function(e){const n=t.node(e);a.info(e,n.type,n.diff),n.isGroup&&(I=n.diff)})),a.warn("Returning from recursive render XAX",y,I),{elem:y,diff:I}}),"recursiveRender"),F=e((async(e,d)=>{var s,c,l,g,f,u;const p=new v({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:(null==(s=e.config)?void 0:s.nodeSpacing)||(null==(l=null==(c=e.config)?void 0:c.flowchart)?void 0:l.nodeSpacing)||e.nodeSpacing,ranksep:(null==(g=e.config)?void 0:g.rankSpacing)||(null==(u=null==(f=e.config)?void 0:f.flowchart)?void 0:u.rankSpacing)||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}})),h=d.select("g");n(h,e.markers,e.type,e.diagramId),t(),r(),i(),I(),e.nodes.forEach((e=>{p.setNode(e.id,{...e}),e.parentId&&p.setParent(e.id,e.parentId)})),a.debug("Edges:",e.edges),e.edges.forEach((e=>{if(e.start===e.end){const n=e.start,t=n+"---"+n+"---1",r=n+"---"+n+"---2",i=p.node(n);p.setNode(t,{domId:t,id:t,parentId:i.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),p.setParent(t,i.parentId),p.setNode(r,{domId:r,id:r,parentId:i.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),p.setParent(r,i.parentId);const a=structuredClone(e),o=structuredClone(e),d=structuredClone(e);a.label="",a.arrowTypeEnd="none",a.id=n+"-cyclic-special-1",o.arrowTypeStart="none",o.arrowTypeEnd="none",o.id=n+"-cyclic-special-mid",d.label="",i.isGroup&&(a.fromCluster=n,d.toCluster=n),d.id=n+"-cyclic-special-2",d.arrowTypeStart="none",p.setEdge(n,t,a,n+"-cyclic-special-0"),p.setEdge(t,r,o,n+"-cyclic-special-1"),p.setEdge(r,n,d,n+"-cyc<lic-special-2")}else p.setEdge(e.start,e.end,{...e},e.id)})),a.warn("Graph at first:",JSON.stringify(b(p))),j(p),a.warn("Graph after XAX:",JSON.stringify(b(p)));const w=o();await M(h,p,e.type,e.diagramId,void 0,w)}),"render");export{F as render};
