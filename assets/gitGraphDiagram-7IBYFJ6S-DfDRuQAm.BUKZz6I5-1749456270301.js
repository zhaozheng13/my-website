import{p as t}from"./chunk-4BMEZGHF-Byc923bM.D8PsmQ7V-1749456270301.js";import{I as r}from"./chunk-XZIHB7SX-Dal4Slb3.Bbbmt_Uy-1749456270301.js";import{a as e,M as n,L as o,r as a,v as s,w as i,x as c,l as d,g as h,y as m,K as $,V as l,R as y,F as g,W as p,X as x,Y as u,Z as f}from"./index.D6N_tnH7-1749456270301.js";import{p as b}from"./radar-MK3ICKWK-CiNWpY4n.CQNgfoZ--1749456270301.js";import"./_baseUniq-CyBKxUBB.5lF9BPpr-1749456270301.js";import"./min-DKZp8rBd.BhqG_kRl-1749456270301.js";import"./clone-CS7zTRQj.CSId7s9L-1749456270301.js";var w={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},B=u.gitGraph,v=e((()=>p({...B,...x().gitGraph})),"getConfig"),E=new r((()=>{const t=v(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}}));function C(){return f({length:7})}function k(t,r){const e=Object.create(null);return t.reduce(((t,n)=>{const o=r(n);return e[o]||(e[o]=!0,t.push(n)),t}),[])}e(C,"getID"),e(k,"uniqBy");var L=e((function(t){E.records.direction=t}),"setDirection"),T=e((function(t){d.debug("options str",t),t=(t=null==t?void 0:t.trim())||"{}";try{E.records.options=JSON.parse(t)}catch(r){d.error("error while parsing gitGraph options",r.message)}}),"setOptions"),M=e((function(){return E.records.options}),"getOptions"),R=e((function(t){let r=t.msg,e=t.id;const n=t.type;let o=t.tags;d.info("commit",r,e,n,o),d.debug("Entering commit:",r,e,n,o);const a=v();e=g.sanitizeText(e,a),r=g.sanitizeText(r,a),o=null==o?void 0:o.map((t=>g.sanitizeText(t,a)));const s={id:e||E.records.seq+"-"+C(),message:r,seq:E.records.seq++,type:n??w.NORMAL,tags:o??[],parents:null==E.records.head?[]:[E.records.head.id],branch:E.records.currBranch};E.records.head=s,d.info("main branch",a.mainBranchName),E.records.commits.set(s.id,s),E.records.branches.set(E.records.currBranch,s.id),d.debug("in pushCommit "+s.id)}),"commit"),P=e((function(t){let r=t.name;const e=t.order;if(r=g.sanitizeText(r,v()),E.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);E.records.branches.set(r,null!=E.records.head?E.records.head.id:null),E.records.branchConfig.set(r,{name:r,order:e}),G(r),d.debug("in createBranch")}),"branch"),I=e((t=>{let r=t.branch,e=t.id;const n=t.type,o=t.tags,a=v();r=g.sanitizeText(r,a),e&&(e=g.sanitizeText(e,a));const s=E.records.branches.get(E.records.currBranch),i=E.records.branches.get(r),c=s?E.records.commits.get(s):void 0,h=i?E.records.commits.get(i):void 0;if(c&&h&&c.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(E.records.currBranch===r){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(void 0===c||!c){const t=new Error(`Incorrect usage of "merge". Current branch (${E.records.currBranch})has no commits`);throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},t}if(!E.records.branches.has(r)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},t}if(void 0===h||!h){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},t}if(c===h){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(e&&E.records.commits.has(e)){const t=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw t.hash={text:`merge ${r} ${e} ${n} ${null==o?void 0:o.join(" ")}`,token:`merge ${r} ${e} ${n} ${null==o?void 0:o.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${n} ${null==o?void 0:o.join(" ")}`]},t}const m=i||"",$={id:e||`${E.records.seq}-${C()}`,message:`merged branch ${r} into ${E.records.currBranch}`,seq:E.records.seq++,parents:null==E.records.head?[]:[E.records.head.id,m],branch:E.records.currBranch,type:w.MERGE,customType:n,customId:!!e,tags:o??[]};E.records.head=$,E.records.commits.set($.id,$),E.records.branches.set(E.records.currBranch,$.id),d.debug(E.records.branches),d.debug("in mergeBranch")}),"merge"),A=e((function(t){let r=t.id,e=t.targetId,n=t.tags,o=t.parent;d.debug("Entering cherryPick:",r,e,n);const a=v();if(r=g.sanitizeText(r,a),e=g.sanitizeText(e,a),n=null==n?void 0:n.map((t=>g.sanitizeText(t,a))),o=g.sanitizeText(o,a),!r||!E.records.commits.has(r)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const s=E.records.commits.get(r);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&(!Array.isArray(s.parents)||!s.parents.includes(o))){throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.")}const i=s.branch;if(s.type===w.MERGE&&!o){throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.")}if(!e||!E.records.commits.has(e)){if(i===E.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const t=E.records.branches.get(E.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${E.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const a=E.records.commits.get(t);if(void 0===a||!a){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${E.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const c={id:E.records.seq+"-"+C(),message:`cherry-picked ${null==s?void 0:s.message} into ${E.records.currBranch}`,seq:E.records.seq++,parents:null==E.records.head?[]:[E.records.head.id,s.id],branch:E.records.currBranch,type:w.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${s.id}${s.type===w.MERGE?`|parent:${o}`:""}`]};E.records.head=c,E.records.commits.set(c.id,c),E.records.branches.set(E.records.currBranch,c.id),d.debug(E.records.branches),d.debug("in cherryPick")}}),"cherryPick"),G=e((function(t){if(t=g.sanitizeText(t,v()),!E.records.branches.has(t)){const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}{E.records.currBranch=t;const r=E.records.branches.get(E.records.currBranch);E.records.head=void 0!==r&&r?E.records.commits.get(r)??null:null}}),"checkout");function O(t,r,e){const n=t.indexOf(r);-1===n?t.push(e):t.splice(n,1,e)}function q(t){const r=t.reduce(((t,r)=>t.seq>r.seq?t:r),t[0]);let e="";t.forEach((function(t){e+=t===r?"\t*":"\t|"}));const n=[e,r.id,r.seq];for(const o in E.records.branches)E.records.branches.get(o)===r.id&&n.push(o);if(d.debug(n.join(" ")),r.parents&&2==r.parents.length&&r.parents[0]&&r.parents[1]){const e=E.records.commits.get(r.parents[0]);O(t,r,e),r.parents[1]&&t.push(E.records.commits.get(r.parents[1]))}else{if(0==r.parents.length)return;if(r.parents[0]){const e=E.records.commits.get(r.parents[0]);O(t,r,e)}}q(t=k(t,(t=>t.id)))}e(O,"upsert"),e(q,"prettyPrintCommitHistory");var H=e((function(){d.debug(E.records.commits);q([W()[0]])}),"prettyPrint"),z=e((function(){E.reset(),y()}),"clear"),j=e((function(){return[...E.records.branchConfig.values()].map(((t,r)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${r}`)})).sort(((t,r)=>(t.order??0)-(r.order??0))).map((({name:t})=>({name:t})))}),"getBranchesAsObjArray"),S=e((function(){return E.records.branches}),"getBranches"),D=e((function(){return E.records.commits}),"getCommits"),W=e((function(){const t=[...E.records.commits.values()];return t.forEach((function(t){d.debug(t.id)})),t.sort(((t,r)=>t.seq-r.seq)),t}),"getCommitsArray"),N={commitType:w,getConfig:v,setDirection:L,setOptions:T,getOptions:M,commit:R,branch:P,merge:I,cherryPick:A,checkout:G,prettyPrint:H,clear:z,getBranchesAsObjArray:j,getBranches:S,getCommits:D,getCommitsArray:W,getCurrentBranch:e((function(){return E.records.currBranch}),"getCurrentBranch"),getDirection:e((function(){return E.records.direction}),"getDirection"),getHead:e((function(){return E.records.head}),"getHead"),setAccTitle:c,getAccTitle:i,getAccDescription:s,setAccDescription:a,setDiagramTitle:o,getDiagramTitle:n},K=e(((r,e)=>{t(r,e),r.dir&&e.setDirection(r.dir);for(const t of r.statements)F(t,e)}),"populate"),F=e(((t,r)=>{const n={Commit:e((t=>r.commit(Y(t))),"Commit"),Branch:e((t=>r.branch(_(t))),"Branch"),Merge:e((t=>r.merge(U(t))),"Merge"),Checkout:e((t=>r.checkout(V(t))),"Checkout"),CherryPicking:e((t=>r.cherryPick(X(t))),"CherryPicking")}[t.$type];n?n(t):d.error(`Unknown statement type: ${t.$type}`)}),"parseStatement"),Y=e((t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?w[t.type]:w.NORMAL,tags:t.tags??void 0})),"parseCommit"),_=e((t=>({name:t.name,order:t.order??0})),"parseBranch"),U=e((t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?w[t.type]:void 0,tags:t.tags??void 0})),"parseMerge"),V=e((t=>t.branch),"parseCheckout"),X=e((t=>{var r;return{id:t.id,targetId:"",tags:0===(null==(r=t.tags)?void 0:r.length)?void 0:t.tags,parent:t.parent}}),"parseCherryPicking"),Z={parse:e((async t=>{const r=await b("gitGraph",t);d.debug(r),K(r,N)}),"parse")},Q=h(),J=null==Q?void 0:Q.gitGraph,tt=10,rt=40,et=new Map,nt=new Map,ot=new Map,at=[],st=0,it="LR",ct=e((()=>{et.clear(),nt.clear(),ot.clear(),st=0,at=[],it="LR"}),"clear"),dt=e((t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=t.trim(),r.appendChild(e)})),r}),"drawText"),ht=e((t=>{let r,n,o;return"BT"===it?(n=e(((t,r)=>t<=r),"comparisonFunc"),o=1/0):(n=e(((t,r)=>t>=r),"comparisonFunc"),o=0),t.forEach((t=>{var e,a;const s="TB"===it||"BT"==it?null==(e=nt.get(t))?void 0:e.y:null==(a=nt.get(t))?void 0:a.x;void 0!==s&&n(s,o)&&(r=t,o=s)})),r}),"findClosestParent"),mt=e((t=>{let r="",e=1/0;return t.forEach((t=>{const n=nt.get(t).y;n<=e&&(r=t,e=n)})),r||void 0}),"findClosestParentBT"),$t=e(((t,r,e)=>{let n=e,o=e;const a=[];t.forEach((t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);e.parents.length?(n=yt(e),o=Math.max(n,o)):a.push(e),gt(e,n)})),n=o,a.forEach((t=>{pt(t,n,e)})),t.forEach((t=>{const e=r.get(t);if(null==e?void 0:e.parents.length){const t=mt(e.parents);n=nt.get(t).y-rt,n<=o&&(o=n);const r=et.get(e.branch).pos,a=n-tt;nt.set(e.id,{x:r,y:a})}}))}),"setParallelBTPos"),lt=e((t=>{var r;const e=ht(t.parents.filter((t=>null!==t)));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);const n=null==(r=nt.get(e))?void 0:r.y;if(void 0===n)throw new Error(`Closest parent position not found for commit ${t.id}`);return n}),"findClosestParentPos"),yt=e((t=>lt(t)+rt),"calculateCommitPosition"),gt=e(((t,r)=>{const e=et.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const n=e.pos,o=r+tt;return nt.set(t.id,{x:n,y:o}),{x:n,y:o}}),"setCommitPosition"),pt=e(((t,r,e)=>{const n=et.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const o=r+e,a=n.pos;nt.set(t.id,{x:a,y:o})}),"setRootPosition"),xt=e(((t,r,e,n,o,a)=>{if(a===w.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${o%8} ${n}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${o%8} ${n}-inner`);else if(a===w.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`);else{const s=t.append("circle");if(s.attr("cx",e.x),s.attr("cy",e.y),s.attr("r",r.type===w.MERGE?9:10),s.attr("class",`commit ${r.id} commit${o%8}`),a===w.MERGE){const a=t.append("circle");a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",6),a.attr("class",`commit ${n} ${r.id} commit${o%8}`)}if(a===w.REVERSE){t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${n} ${r.id} commit${o%8}`)}}}),"drawCommitBullet"),ut=e(((t,r,e,n)=>{var o;if(r.type!==w.CHERRY_PICK&&(r.customId&&r.type===w.MERGE||r.type!==w.MERGE)&&(null==J?void 0:J.showCommitLabel)){const a=t.append("g"),s=a.insert("rect").attr("class","commit-label-bkg"),i=a.append("text").attr("x",n).attr("y",e.y+25).attr("class","commit-label").text(r.id),c=null==(o=i.node())?void 0:o.getBBox();if(c&&(s.attr("x",e.posWithOffset-c.width/2-2).attr("y",e.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===it||"BT"===it?(s.attr("x",e.x-(c.width+16+5)).attr("y",e.y-12),i.attr("x",e.x-(c.width+16)).attr("y",e.y+c.height-12)):i.attr("x",e.posWithOffset-c.width/2),J.rotateCommitLabel))if("TB"===it||"BT"===it)i.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),s.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const t=-7.5-(c.width+10)/25*9.5,r=10+c.width/25*8.5;a.attr("transform","translate("+t+", "+r+") rotate(-45, "+n+", "+e.y+")")}}}),"drawCommitLabel"),ft=e(((t,r,e,n)=>{var o;if(r.tags.length>0){let a=0,s=0,i=0;const c=[];for(const n of r.tags.reverse()){const r=t.insert("polygon"),d=t.append("circle"),h=t.append("text").attr("y",e.y-16-a).attr("class","tag-label").text(n),m=null==(o=h.node())?void 0:o.getBBox();if(!m)throw new Error("Tag bbox not found");s=Math.max(s,m.width),i=Math.max(i,m.height),h.attr("x",e.posWithOffset-m.width/2),c.push({tag:h,hole:d,rect:r,yOffset:a}),a+=20}for(const{tag:t,hole:r,rect:o,yOffset:d}of c){const a=i/2,c=e.y-19.2-d;if(o.attr("class","tag-label-bkg").attr("points",`\n      ${n-s/2-2},${c+2}  \n      ${n-s/2-2},${c-2}\n      ${e.posWithOffset-s/2-4},${c-a-2}\n      ${e.posWithOffset+s/2+4},${c-a-2}\n      ${e.posWithOffset+s/2+4},${c+a+2}\n      ${e.posWithOffset-s/2-4},${c+a+2}`),r.attr("cy",c).attr("cx",n-s/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===it||"BT"===it){const i=n+d;o.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${i+2}\n        ${e.x},${i-2}\n        ${e.x+tt},${i-a-2}\n        ${e.x+tt+s+4},${i-a-2}\n        ${e.x+tt+s+4},${i+a+2}\n        ${e.x+tt},${i+a+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),r.attr("cx",e.x+2).attr("cy",i).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),t.attr("x",e.x+5).attr("y",i+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+n+")")}}}}),"drawCommitTags"),bt=e((t=>{switch(t.customType??t.type){case w.NORMAL:return"commit-normal";case w.REVERSE:return"commit-reverse";case w.HIGHLIGHT:return"commit-highlight";case w.MERGE:return"commit-merge";case w.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),wt=e(((t,r,e,n)=>{const o={x:0,y:0};if(!(t.parents.length>0)){if("TB"===r)return 30;if("BT"===r){return(n.get(t.id)??o).y-rt}return 0}{const e=ht(t.parents);if(e){const a=n.get(e)??o;if("TB"===r)return a.y+rt;if("BT"===r){return(n.get(t.id)??o).y-rt}return a.x+rt}}return 0}),"calculatePosition"),Bt=e(((t,r,e)=>{var n,o;const a="BT"===it&&e?r:r+tt,s="TB"===it||"BT"===it?a:null==(n=et.get(t.branch))?void 0:n.pos,i="TB"===it||"BT"===it?null==(o=et.get(t.branch))?void 0:o.pos:a;if(void 0===i||void 0===s)throw new Error(`Position were undefined for commit ${t.id}`);return{x:i,y:s,posWithOffset:a}}),"getCommitPosition"),vt=e(((t,r,n)=>{if(!J)throw new Error("GitGraph config not found");const o=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let s="TB"===it||"BT"===it?30:0;const i=[...r.keys()],c=(null==J?void 0:J.parallelCommits)??!1,d=e(((t,e)=>{var n,o;const a=null==(n=r.get(t))?void 0:n.seq,s=null==(o=r.get(e))?void 0:o.seq;return void 0!==a&&void 0!==s?a-s:0}),"sortKeys");let h=i.sort(d);"BT"===it&&(c&&$t(h,r,s),h=h.reverse()),h.forEach((t=>{var e;const i=r.get(t);if(!i)throw new Error(`Commit not found for key ${t}`);c&&(s=wt(i,it,s,nt));const d=Bt(i,s,c);if(n){const t=bt(i),r=i.customType??i.type,n=(null==(e=et.get(i.branch))?void 0:e.index)??0;xt(o,i,d,t,n,r),ut(a,i,d,s),ft(a,i,d,s)}"TB"===it||"BT"===it?nt.set(i.id,{x:d.x,y:d.posWithOffset}):nt.set(i.id,{x:d.posWithOffset,y:d.y}),s="BT"===it&&c?s+rt:s+rt+tt,s>st&&(st=s)}))}),"drawCommits"),Et=e(((t,r,n,o,a)=>{const s=("TB"===it||"BT"===it?n.x<o.x:n.y<o.y)?r.branch:t.branch,i=e((t=>t.branch===s),"isOnBranchToGetCurve"),c=e((e=>e.seq>t.seq&&e.seq<r.seq),"isBetweenCommits");return[...a.values()].some((t=>c(t)&&i(t)))}),"shouldRerouteArrow"),Ct=e(((t,r,e=0)=>{const n=t+Math.abs(t-r)/2;if(e>5)return n;if(at.every((t=>Math.abs(t-n)>=10)))return at.push(n),n;const o=Math.abs(t-r);return Ct(t,r-o/5,e+1)}),"findLane"),kt=e(((t,r,e,n)=>{var o,a,s,i,c;const d=nt.get(r.id),h=nt.get(e.id);if(void 0===d||void 0===h)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const m=Et(r,e,d,h,n);let $,l="",y="",g=0,p=0,x=null==(o=et.get(e.branch))?void 0:o.index;if(e.type===w.MERGE&&r.id!==e.parents[0]&&(x=null==(a=et.get(r.branch))?void 0:a.index),m){l="A 10 10, 0, 0, 0,",y="A 10 10, 0, 0, 1,",g=10,p=10;const t=d.y<h.y?Ct(d.y,h.y):Ct(h.y,d.y),e=d.x<h.x?Ct(d.x,h.x):Ct(h.x,d.x);"TB"===it?d.x<h.x?$=`M ${d.x} ${d.y} L ${e-g} ${d.y} ${y} ${e} ${d.y+p} L ${e} ${h.y-g} ${l} ${e+p} ${h.y} L ${h.x} ${h.y}`:(x=null==(s=et.get(r.branch))?void 0:s.index,$=`M ${d.x} ${d.y} L ${e+g} ${d.y} ${l} ${e} ${d.y+p} L ${e} ${h.y-g} ${y} ${e-p} ${h.y} L ${h.x} ${h.y}`):"BT"===it?d.x<h.x?$=`M ${d.x} ${d.y} L ${e-g} ${d.y} ${l} ${e} ${d.y-p} L ${e} ${h.y+g} ${y} ${e+p} ${h.y} L ${h.x} ${h.y}`:(x=null==(i=et.get(r.branch))?void 0:i.index,$=`M ${d.x} ${d.y} L ${e+g} ${d.y} ${y} ${e} ${d.y-p} L ${e} ${h.y+g} ${l} ${e-p} ${h.y} L ${h.x} ${h.y}`):d.y<h.y?$=`M ${d.x} ${d.y} L ${d.x} ${t-g} ${l} ${d.x+p} ${t} L ${h.x-g} ${t} ${y} ${h.x} ${t+p} L ${h.x} ${h.y}`:(x=null==(c=et.get(r.branch))?void 0:c.index,$=`M ${d.x} ${d.y} L ${d.x} ${t+g} ${y} ${d.x+p} ${t} L ${h.x-g} ${t} ${l} ${h.x} ${t-p} L ${h.x} ${h.y}`)}else l="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",g=20,p=20,"TB"===it?(d.x<h.x&&($=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${d.x} ${h.y-g} ${l} ${d.x+p} ${h.y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${y} ${h.x} ${d.y+p} L ${h.x} ${h.y}`),d.x>h.x&&(l="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",g=20,p=20,$=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${d.x} ${h.y-g} ${y} ${d.x-p} ${h.y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${h.x+g} ${d.y} ${l} ${h.x} ${d.y+p} L ${h.x} ${h.y}`),d.x===h.x&&($=`M ${d.x} ${d.y} L ${h.x} ${h.y}`)):"BT"===it?(d.x<h.x&&($=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${d.x} ${h.y+g} ${y} ${d.x+p} ${h.y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${l} ${h.x} ${d.y-p} L ${h.x} ${h.y}`),d.x>h.x&&(l="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",g=20,p=20,$=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${d.x} ${h.y+g} ${l} ${d.x-p} ${h.y} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${l} ${h.x} ${d.y-p} L ${h.x} ${h.y}`),d.x===h.x&&($=`M ${d.x} ${d.y} L ${h.x} ${h.y}`)):(d.y<h.y&&($=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${y} ${h.x} ${d.y+p} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${d.x} ${h.y-g} ${l} ${d.x+p} ${h.y} L ${h.x} ${h.y}`),d.y>h.y&&($=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${d.x} ${d.y} L ${h.x-g} ${d.y} ${l} ${h.x} ${d.y-p} L ${h.x} ${h.y}`:`M ${d.x} ${d.y} L ${d.x} ${h.y+g} ${y} ${d.x+p} ${h.y} L ${h.x} ${h.y}`),d.y===h.y&&($=`M ${d.x} ${d.y} L ${h.x} ${h.y}`));if(void 0===$)throw new Error("Line definition not found");t.append("path").attr("d",$).attr("class","arrow arrow"+x%8)}),"drawArrow"),Lt=e(((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach((t=>{const n=r.get(t);n.parents&&n.parents.length>0&&n.parents.forEach((t=>{kt(e,r.get(t),n,r)}))}))}),"drawArrows"),Tt=e(((t,r)=>{const e=t.append("g");r.forEach(((t,r)=>{var n;const o=r%8,a=null==(n=et.get(t.name))?void 0:n.pos;if(void 0===a)throw new Error(`Position not found for branch ${t.name}`);const s=e.append("line");s.attr("x1",0),s.attr("y1",a),s.attr("x2",st),s.attr("y2",a),s.attr("class","branch branch"+o),"TB"===it?(s.attr("y1",30),s.attr("x1",a),s.attr("y2",st),s.attr("x2",a)):"BT"===it&&(s.attr("y1",st),s.attr("x1",a),s.attr("y2",30),s.attr("x2",a)),at.push(a);const i=t.name,c=dt(i),d=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+o);h.node().appendChild(c);const m=c.getBBox();d.attr("class","branchLabelBkg label"+o).attr("rx",4).attr("ry",4).attr("x",-m.width-4-(!0===(null==J?void 0:J.rotateCommitLabel)?30:0)).attr("y",-m.height/2+8).attr("width",m.width+18).attr("height",m.height+4),h.attr("transform","translate("+(-m.width-14-(!0===(null==J?void 0:J.rotateCommitLabel)?30:0))+", "+(a-m.height/2-1)+")"),"TB"===it?(d.attr("x",a-m.width/2-10).attr("y",0),h.attr("transform","translate("+(a-m.width/2-5)+", 0)")):"BT"===it?(d.attr("x",a-m.width/2-10).attr("y",st),h.attr("transform","translate("+(a-m.width/2-5)+", "+st+")")):d.attr("transform","translate(-19, "+(a-m.height/2)+")")}))}),"drawBranches"),Mt=e((function(t,r,e,n,o){return et.set(t,{pos:r,index:e}),r+=50+(o?40:0)+("TB"===it||"BT"===it?n.width/2:0)}),"setBranchPosition"),Rt={parser:Z,db:N,renderer:{draw:e((function(t,r,e,n){if(ct(),d.debug("in gitgraph renderer",t+"\n","id:",r,e),!J)throw new Error("GitGraph config not found");const o=J.rotateCommitLabel??!1,a=n.db;ot=a.getCommits();const s=a.getBranchesAsObjArray();it=a.getDirection();const i=m(`[id="${r}"]`);let c=0;s.forEach(((t,r)=>{var e;const n=dt(t.name),a=i.append("g"),s=a.insert("g").attr("class","branchLabel"),d=s.insert("g").attr("class","label branch-label");null==(e=d.node())||e.appendChild(n);const h=n.getBBox();c=Mt(t.name,c,r,h,o),d.remove(),s.remove(),a.remove()})),vt(i,ot,!1),J.showBranches&&Tt(i,s),Lt(i,ot),vt(i,ot,!0),$.insertTitle(i,"gitTitleText",J.titleTopMargin??0,a.getDiagramTitle()),l(void 0,i,J.diagramPadding,J.useMaxWidth)}),"draw")},styles:e((t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((r=>`\n        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }\n        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }\n        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }\n        .label${r}  { fill: ${t["git"+r]}; }\n        .arrow${r} { stroke: ${t["git"+r]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`),"getStyles")};export{Rt as diagram};
